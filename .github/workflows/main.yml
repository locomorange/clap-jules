name: Build CLAP Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Set Git safe directory
        run: git config --global --add safe.directory '*'
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Set up MSVC build tools
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: 'x64' # Assuming 64-bit build, can be adjusted

      - name: Build Skia
        shell: pwsh
        working-directory: skia
        run: |
          $OriginalPath = $env:PATH
          Write-Host "Original PATH: $OriginalPath"
          $PathSegments = $env:PATH.Split(';') | Where-Object { $_ -notlike '*emsdk*' }
          $env:PATH = $PathSegments -join ';'
          Write-Host "Temporarily modified PATH for git-sync-deps: $env:PATH"

          Write-Host "Attempting git-sync-deps with python3..."
          python3 tools/git-sync-deps
          if ($LASTEXITCODE -ne 0) {
            Write-Host "python3 tools/git-sync-deps failed. Attempting with python..."
            python tools/git-sync-deps
            if ($LASTEXITCODE -ne 0) {
              Write-Error "git-sync-deps failed after trying python3 and python. Exit code: $LASTEXITCODE"
              $env:PATH = $OriginalPath # Restore PATH before exiting
              exit 1
            }
          }
          Write-Host "git-sync-deps completed successfully."
          $env:PATH = $OriginalPath
          Write-Host "Restored PATH: $env:PATH"

          Write-Host "Searching for ft2build.h in skia/third_party/externals..."
          $ft2buildPath = Get-ChildItem -Path "third_party/externals" -Filter "ft2build.h" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($null -ne $ft2buildPath) {
              Write-Host "Found ft2build.h at: $($ft2buildPath.FullName)"
              $freetypeIncludeDir = Split-Path -Path $ft2buildPath.FullName
              # Go one level up if it's in a subdirectory like 'freetype/include' to get the base 'include'
              # This is heuristic; ft2build.h is usually in .../freetype/include or .../freetype2/include
              # Let's assume $freetypeIncludeDir is the directory containing ft2build.h, e.g., .../freetype/include
              # The gn arg needs a path relative to the build directory (skia/out/Release)
              # or relative to the skia source directory.
              # Relative to skia source dir: $RelativefreetypeIncludeDir = $freetypeIncludeDir -replace ([regex]::Escape($env:GITHUB_WORKSPACE) + "[/\]skia[/\]"), ""
              # For extra_cflags, it's usually relative to the file being compiled or an absolute path.
              # Let's try to construct a relative path from skia source root.
              $RelativefreetypeIncludeDir = $freetypeIncludeDir.Replace($env:PWD.Path + '\', "") # $PWD should be skia dir, ensure trailing slash for replacement
              Write-Host "Relative FreeType include directory: $RelativefreetypeIncludeDir"
              # Add this path to gn args' extra_cflags.
              # This is tricky because the args string is complex.
              # For now, let's just confirm its presence and location.
              # The extra_cflags modification will be a separate step if needed.
          } else {
              Write-Warning "ft2build.h not found in skia/third_party/externals."
          }

          Write-Host "Running gn gen..."
          bin/gn gen out/Release --args="is_official_build=true skia_use_system_libraries=false skia_use_libwebp=false skia_use_libjpeg_turbo=false skia_use_libpng=false skia_use_expat=false skia_use_freetype=true skia_enable_fontmgr_custom_directory=false skia_enable_fontmgr_custom_embedded=false skia_enable_fontmgr_custom_empty=true skia_use_harfbuzz=false"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "gn gen failed. Exit code: $LASTEXITCODE"
            exit 1
          }
          Write-Host "gn gen completed successfully."

          Write-Host "Running ninja..."
          ninja -C out/Release skia skshaper skparagraph
          if ($LASTEXITCODE -ne 0) {
            Write-Error "ninja build failed. Exit code: $LASTEXITCODE"
            exit 1
          }
          Write-Host "ninja build completed successfully."

          Write-Host "Listing contents of skia/out/Release:"
          Get-ChildItem out/Release -Recurse -ErrorAction SilentlyContinue

          Write-Host "Listing contents of skia/out/Release/lib:"
          if (Test-Path out/Release/lib) {
            Get-ChildItem out/Release/lib -Recurse -ErrorAction SilentlyContinue
          } else {
            Write-Host "skia/out/Release/lib does not exist."
          }

          Write-Host "Listing contents of skia/out/Release/obj:"
          if (Test-Path out/Release/obj) {
            Get-ChildItem out/Release/obj -Recurse -ErrorAction SilentlyContinue
          } else {
            Write-Host "skia/out/Release/obj does not exist."
          }

      - name: Clean previous build artifacts
        run: |
          if (Test-Path build) {
            Remove-Item -Recurse -Force build
          }
          if (Test-Path CMakeCache.txt) {
            Remove-Item CMakeCache.txt
          }
        shell: pwsh

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build with CMake
        run: cmake --build build --config Release

      - name: Upload CLAP plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: clap-plugin-windows
          path: build/Release/*.clap # Assuming the plugin is in build/Release and has a .clap extension
          if-no-files-found: error # Fail the workflow if the plugin isn't found
