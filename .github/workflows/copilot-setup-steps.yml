---
name: "Copilot Setup Steps"

env:
  COPILOT_AGENT_FIREWALL_ALLOW_LIST_ADDITIONS: >
    esm.ubuntu.com,
    sourceware.org,
    www.mirrorservice.org,
    download.qt.io,
    mirrors.ocf.berkeley.edu

# Automatically run the setup steps when they are changed to allow for
# easy validation, and allow manual testing through the repository's
# "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be
  # picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for
    # your steps. Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps,
      # for example to install dependencies, you'll need the
      # `contents: read` permission. If you don't clone the repository in
      # your setup steps, Copilot will do this for you automatically
      # after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the
    # agent starts. If you do not check out your code, Copilot will do
    # this for you.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          lfs: true

      - name: Install basic development dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            git \
            pkg-config \
            curl \
            zip \
            unzip \
            tar \
            libasound2-dev \
            librtaudio-dev \
            librtmidi-dev \
            autoconf \
            libtool

      - name: Install Qt dependencies for vcpkg build
        run: |
          sudo apt-get install -y \
            '^libxcb.*-dev' \
            libx11-xcb-dev \
            libglu1-mesa-dev \
            libxrender-dev \
            libxi-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libegl1-mesa-dev \
            libgl1-mesa-dev \
            libgles2-mesa-dev \
            libglvnd-dev

      - name: Clone CLAP host repository
        run: |
          git clone --recursive \
            https://github.com/free-audio/clap-host.git /tmp/clap-host


      - name: Bootstrap vcpkg
        working-directory: /tmp/clap-host
        run: |
          echo "Bootstrapping vcpkg..."
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Build CLAP host using scripts/build.sh (static build)
        working-directory: /tmp/clap-host
        run: |
          echo "Building CLAP host using scripts/build.sh for static build..."
          chmod +x scripts/build.sh

          # Fix EGL/OpenGL conflict by adding opengl feature to Qt build flags
          echo "Patching scripts/build.sh to add opengl feature for Qt build..."
          sed -i 's/QT_FEATURES=",xcb,xcb-xlib,xkb,xkbcommon-x11,xlib,xrender,fontconfig,harfbuzz,egl"/QT_FEATURES=",xcb,xcb-xlib,xkb,xkbcommon-x11,xlib,xrender,fontconfig,harfbuzz,egl,opengl"/' scripts/build.sh

          # Verify the patch was applied
          echo "Checking Qt features after patch:"
          grep "QT_FEATURES=" scripts/build.sh

          echo "Starting static build with scripts/build.sh..."
          ./scripts/build.sh x64-linux

      - name: Verify CLAP host build
        working-directory: /tmp/clap-host
        run: |
          echo "Verifying CLAP host build..."

          if [ -f "builds/ninja-vcpkg/clap-host" ]; then
            echo "✅ CLAP host binary found at builds/ninja-vcpkg/clap-host"
            echo "Testing binary..."
            ./builds/ninja-vcpkg/clap-host --help || echo "Host execution completed"
            echo "✅ Static build successful!"
          else
            echo "❌ CLAP host binary not found"
            echo "Checking build directories..."
            find builds/ -name "*clap*" -type f 2>/dev/null || echo "No clap binaries found"
            exit 1
          fi

      - name: Test plugin with CLAP host
        run: |
          echo "Building and testing our CLAP plugin..."

          # Build our CLAP plugin
          cd /home/runner/work/clap-jules/clap-jules
          mkdir -p build
          cd build

          cmake ..
          make -j$(nproc)

          if [ -f "MyFirstClapPlugin.so" ]; then
            echo "✅ Plugin built successfully: MyFirstClapPlugin.so"

            # Test plugin with CLAP host
            echo "Testing plugin with CLAP host..."
            mkdir -p /tmp/test-plugins
            cp MyFirstClapPlugin.so /tmp/test-plugins/

            echo "✅ Plugin ready for testing with CLAP host!"
            echo "✅ Static build and plugin integration successful!"
          else
            echo "❌ Plugin build failed"
            exit 1
          fi
