name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: clap-host-linux-${{ github.sha }}
          path: |
            clap-host/builds/ninja-vcpkg/host/Release/clap-host

      - name: Check if artifact exists
        id: check_artifact
        run: |
          if [ -d ./build ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Install system dependencies for clap-host (vcpkg build)
        if: steps.check_artifact.outputs.found == 'false'
        run: |
          sudo apt update && sudo apt upgrade
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt update

          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null

          sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"

          sudo apt update
          sudo apt install cmake
          # Add Mono repository for nuget
          sudo apt install -y wget
          wget https://download.mono-project.com/repo/xamarin.gpg -O - | sudo tee /etc/apt/trusted.gpg.d/xamarin.asc
          echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gperf ninja-build cmake \
            gcc-13 g++-13 \
            libatspi2.0-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libx11-xcb-dev \
            '^libxcb.*-dev' \
            libxcb-damage0-dev \
            libxcb-dpms0-dev \
            libxcb-glx0-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-present-dev \
            libxcb-randr0-dev \
            libxcb-record0-dev \
            libxcb-render-util0-dev \
            libxcb-render0-dev \
            libxcb-res0-dev \
            libxcb-shape0-dev \
            libxcb-shm0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            libxcb1-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxrender-dev \
            nuget \
            libegl1-mesa-dev libgles2-mesa-dev

      - name: Clone clap-host repository
        if: steps.check_artifact.outputs.found == 'false'
        run: |
          git clone --recurse-submodules https://github.com/free-audio/clap-host.git clap-host

      - name: 'Bootstrap VCPKG'
        if: steps.check_artifact.outputs.found == 'false'
        shell: bash
        run: clap-host/vcpkg/bootstrap-vcpkg.sh
        
      - name: Build clap-host using vcpkg
        if: steps.check_artifact.outputs.found == 'false'
        run: |
          cd clap-host
          # Build using the clap-host build script
          scripts/build.sh x64-linux

      - name: Upload clap-host artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clap-host-linux-${{ github.sha }}
          path: |
            clap-host/builds/ninja-vcpkg/host/Release/clap-host
          if-no-files-found: warn
